for (file in list.files(glue('../data/hot-dog-not-hot-dog/{data_type}/{class_name}/'))){
print(file)
append(names, file)
append(classes, if (class_name == 'not_hot_dog'){0}else{1})
}
labels <- as.tibble(cbind(names, classes))
print(names)
print(classes)
return(labels)
}
label_data('train', 'not_hot_dog')
#create labels
label_data <- function(data_type, class_name){
names <- list()
classes <- list()
for (file in list.files(glue('../data/hot-dog-not-hot-dog/{data_type}/{class_name}/'))){
names <- append(names, file)
classes <- append(classes, if (class_name == 'not_hot_dog'){0}else{1})
}
labels <- as.tibble(cbind(names, classes))
print(names)
print(classes)
return(labels)
}
label_data('train', 'not_hot_dog')
#create labels
label_data <- function(data_type, class_name){
names <- c()
classes <- c()
for (file in list.files(glue('../data/hot-dog-not-hot-dog/{data_type}/{class_name}/'))){
names <- append(names, file)
classes <- append(classes, if (class_name == 'not_hot_dog'){0}else{1})
}
labels <- as.tibble(cbind(names, classes))
print(names)
print(classes)
return(labels)
}
label_data('train', 'not_hot_dog')
#create labels
label_data <- function(data_type, class_names){
names <- c()
classes <- c()
for (class in class_names){
for (file in list.files(glue('../data/hot-dog-not-hot-dog/{data_type}/{class_name}/'))){
names <- append(names, file)
classes <- append(classes, if (class_name == 'not_hot_dog'){0}else{1})
}
}
labels <- as.tibble(cbind(names, classes))
return(labels)
}
label_data('train', c('not_hot_dog', 'hot_dog'))
#create labels
label_data <- function(data_type, class_names){
names <- c()
classes <- c()
for (class in class_names){
for (file in list.files(glue('../data/hot-dog-not-hot-dog/{data_type}/{class_name}/'))){
names <- append(names, file)
classes <- append(classes, if (class == 'not_hot_dog'){0}else{1})
}
}
labels <- as.tibble(cbind(names, classes))
return(labels)
}
label_data('train', c('not_hot_dog', 'hot_dog'))
#create labels
label_data <- function(data_type, class_names){
names <- c()
classes <- c()
for (class in class_names){
for (file in list.files(glue('../data/hot-dog-not-hot-dog/{data_type}/{class}/'))){
names <- append(names, file)
classes <- append(classes, if (class == 'not_hot_dog'){0}else{1})
}
}
labels <- as.tibble(cbind(names, classes))
return(labels)
}
label_data('train', c('not_hot_dog', 'hot_dog'))
test <- label_data('test', c('not_hot_dog', 'hot_dog'))
train <- label_data('train', c('not_hot_dog', 'hot_dog'))
View(test)
#create labels
label_data <- function(data_type, class_names){
names <- c()
classes <- c()
for (class in class_names){
for (file in list.files(glue('../data/hot-dog-not-hot-dog/{data_type}/{class}/'))){
names <- append(names, file)
classes <- append(classes, if (class == 'not_hot_dog'){'0'}else{'1'})
}
}
labels <- as.tibble(cbind(names, classes))
return(labels)
}
train <- label_data('train', c('not_hot_dog', 'hot_dog'))
test <- label_data('test', c('not_hot_dog', 'hot_dog'))
#split to train and validation
ind<-sample(nrow(full_set),size=floor(0.8*nrow(full_set)))
#split to train and validation
ind<-sample(nrow(train),size=floor(0.8*nrow(train)))
train_set <- train[ind,]
valid_valid <- train[-ind,]
View(train_set)
valid_generator$labels
length(valid_generator$labels)
train_generator$labels
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
batch_size <- 32
train_datagen <- image_data_generator(
rescale = 1/255
)
valid_datagen <- image_data_generator(
rescale = 1/255
)
train_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/train/',
target_size = c(128, 128),
generator = train_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
valid_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/test/',
target_size = c(128, 128),
generator = valid_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
hd_cnn <- keras_model_sequential()
hd_cnn |>
layer_conv_2d(filters = 32,kernel_size = c(3, 3),activation = 'relu', input_shape = c(128, 128, 3)) |>
layer_max_pooling_2d(pool_size = c(2, 2)) |>
layer_conv_2d(filters = 32,kernel_size = c(3, 3),activation = 'relu') |>
layer_max_pooling_2d(pool_size = c(2, 2)) |>
layer_conv_2d(filters = 16,kernel_size = c(3, 3),activation = 'relu') |>
layer_dropout(rate = 0.2) |>
layer_flatten() |>
layer_dense(units = 16, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
summary(hd_cnn)
compile(
hd_cnn,
loss = 'binomial_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=20,
steps_per_epoch=20
)
train_py <-keras:::as_generator.function(train_generator)
valid_py <- keras:::as_generator.function(valid_generator)
history_hot_dog <- fit_generator(
hd_cnn,
train_py,
epochs = 50,
validation_data = valid_py,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_py,
epochs = 50,
validation_data = valid_py,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
train_py <-keras:::as_generator.function(train_generator)
valid_py <- keras:::as_generator.function(valid_generator)
history_hot_dog <- fit_generator(
hd_cnn,
train_py,
epochs = 50,
validation_data = valid_py,
validation_steps=10,
steps_per_epoch=10
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator)/batch_size,
steps_per_epoch=length(train_generator)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator)/batch_size,
steps_per_epoch=length(train_generator)/batch_size
)
length(valid_generator)
length(train_generator)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
conv_base <- InceptionResNetV2(weights='imagenet', include_top= FALSE, input_shape=c(128,128,3) )
conv_base <- inception_resnet_v2_preprocess_input(weights='imagenet', include_top= FALSE, input_shape=c(128,128,3) )
?inception_resnet_v2_preprocess_input()
conv_base <- application_inception_resnet_v2(weights='imagenet', include_top= FALSE, input_shape=c(128,128,3))
transfer_model <- keras_model_sequential() |>
conv_base |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
transfer_model <- keras_model_sequential() |>
conv_base |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
transfer_model <- keras_model_sequential() |>
conv_base |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
conv_base
summary(conv_base)
conv_base <- application_densenet121(weights='imagenet', include_top= FALSE, input_shape=c(128,128,3))
transfer_model <- keras_model_sequential() |>
conv_base |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
transfer_model <- conv_base |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
transfer_model <- keras_model_sequential()
transfer_model <- transfer_model |>
conv_base |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
imagenet_model <- application_densenet121(
input_shape = c(32, 32, 3), weights = 'imagenet', include_top = FALSE
)
transfer_model <- keras_model_sequential() |>
imagenet_model |>
layer_flatten() |>
layer_dense(units = 128, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
imagenet_model <- application_densenet121(
input_shape = c(128, 128, 3), weights = 'imagenet', include_top = FALSE
)
transfer_model <- keras_model_sequential() |>
imagenet_model |>
layer_flatten() |>
layer_dense(units = 128, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
transfer_model <- keras_model_sequential() |>
imagenet_model() |>
layer_flatten() |>
layer_dense(units = 128, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
transfer_model <- keras_model_sequential() |>
conv_base() |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
compile(
transfer_model,
loss = "categorical_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c("accuracy")
)
summary(transfer_model)
freeze_weights(imagenet_model, to = "conv5_block16_2_conv")
summary(transfer_model)
freeze_weights(conv_base, to = "conv5_block16_2_conv")
summary(transfer_model)
history_hot_dog_aug <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog_aug <- fit_generator(
hd_cnn(),
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
freeze_weights(transfer_model, to = "conv5_block16_2_conv")
summary(transfer_model)
conv_base
conv_base
summary(transfer_model)
transfer_model <- keras_model_sequential() |>
conv_base() |>
layer_flatten() |>
layer_dense(units = 32, activation = 'relu') |>
layer_dense(units = 10, activation = 'softmax')
compile(
transfer_model,
loss = "categorical_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c("accuracy")
)
summary(transfer_model)
freeze_weights(conv_base, to = "conv5_block16_2_conv")
summary(transfer_model)
history_hot_dog_trans <- fit_generator(
transfer_model,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog_aug <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
batch_size <- 32
train_datagen <- image_data_generator(
rescale = 1/255,
rotation_range = 20,
width_shift_range = 0.1,
height_shift_range = 0.1,
shear_range = 0.1,
zoom_range = 0.1,
horizontal_flip=TRUE,
fill_mode='nearest'
)
valid_datagen <- image_data_generator(
rescale = 1/255
)
train_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/train/',
target_size = c(128, 128, 3),
generator = train_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
valid_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/test/',
target_size = c(128, 128, 3),
generator = valid_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
history_hot_dog_aug <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
batch_size <- 32
train_datagen <- image_data_generator(
rescale = 1/255,
rotation_range = 20,
width_shift_range = 0.1,
height_shift_range = 0.1,
shear_range = 0.1,
zoom_range = 0.1,
horizontal_flip=TRUE,
fill_mode='nearest'
)
valid_datagen <- image_data_generator(
rescale = 1/255
)
train_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/train/',
target_size = c(128, 128),
generator = train_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
valid_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/test/',
target_size = c(128, 128),
generator = valid_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
batch_size <- 32
train_datagen <- image_data_generator(
rescale = 1/255
)
valid_datagen <- image_data_generator(
rescale = 1/255
)
train_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/train/',
target_size = c(128, 128),
generator = train_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
valid_generator <- flow_images_from_directory(
'../data/hot-dog-not-hot-dog/test/',
target_size = c(128, 128),
generator = valid_datagen,
batch_size = batch_size,
class_mode = 'binary'
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 50,
validation_data = valid_generator,
verbose = 1
#validation_steps=length(valid_generator$labels)/batch_size,
#steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 30,
validation_data = valid_generator,
verbose = 1
#validation_steps=length(valid_generator$labels)/batch_size,
#steps_per_epoch=length(train_generator$labels)/batch_size
)
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 30,
validation_data = valid_generator,
verbose = 1
#validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
history_hot_dog <- fit_generator(
hd_cnn,
train_generator,
epochs = 30,
validation_data = valid_generator,
verbose = 1,
#validation_steps=length(valid_generator$labels)/batch_size,
steps_per_epoch=length(train_generator$labels)/batch_size
)
?model_to_json()
